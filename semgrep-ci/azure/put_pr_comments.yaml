variables:
- group: Semgrep_Variables

steps:
- checkout: self
  clean: true
  fetchDepth: 100000
  persistCredentials: true
- script: |
    dotnet restore -p:RestorePackagesWithLockFile=True
    python -m pip install --upgrade pip
    pip install semgrep
    if [ $(Build.SourceBranchName) = "master" ]; then
        echo "Semgrep full scan"
        semgrep ci --oss-only --json --output /home/vsts/work/1/a/findings.json
    elif [ $(System.PullRequest.PullRequestId) -ge 0 ]; then
        echo "Semgrep diff scan"
        export SEMGREP_PR_ID=$(System.PullRequest.PullRequestId)
        export SEMGREP_BASELINE_REF='origin/master'
        echo "Pull Request Scan from branch: $(Build.SourceBranchName)"
        echo "Pull Request Id: $(System.PullRequest.PullRequestId)"
        git fetch origin master:origin/master
        semgrep ci --json --output /home/vsts/work/1/a/findings.json
    fi

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      # this is inline code
      env | sort


##################################################################################################################
######## PULL REQUEST COMMENTS ###################################################################################
##################################################################################################################
- task: PythonScript@0
  inputs:
    scriptSource: 'inline'
    script: |
      import requests
      import os
      import pprint
      import json
      import logging
      import base64
      import urllib.parse

      # qq: import logging level from environment variable, default to INFO
      loglevel = os.getenv('LOG_LEVEL', 'INFO')
      semgrep_org = os.getenv('SEMGREP_ORG', 'xxxxx')
      logging.basicConfig(level=loglevel)
      logging.debug (loglevel)


      class Message():
          '''Creating an Instance of a PR Comment message'''


          def __init__(self):
              # Get the environment variables from the pipeline
              self.SYSTEM_COLLECTIONURI = os.getenv('SYSTEM_COLLECTIONURI')     
              self.BUILD_SOURCEVERSION = os.getenv('BUILD_SOURCEVERSION')      
              self.SYSTEM_PULLREQUEST_SOURCEBRANCH = os.getenv('SYSTEM_PULLREQUEST_SOURCEBRANCH')
              self.PULLREQUESTID = 0
              self.SYSTEM_TEAMPROJECT = os.getenv('SYSTEM_TEAMPROJECT')
              self.BUILD_REPOSITORY_ID = os.getenv('BUILD_REPOSITORY_ID')
              self.BUILD_REPOSITORY_NAME = os.getenv('BUILD_REPOSITORY_NAME')
              self.SYSTEM_TEAMPROJECTID = os.getenv('SYSTEM_TEAMPROJECTID')
              self.PROJECT_NAME = os.getenv('BUILD_REPOSITORY_NAME')
              self.BUILD_REQUESTEDFOR=os.getenv('SYSTEM_COLLECTIONURI')  
              self.BUILD_REQUESTEDFOREMAIL=os.getenv('BUILD_REQUESTEDFOREMAIL') 
              self.BUILD_REQUESTEDFORID=os.getenv('BUILD_REQUESTEDFORID') 

              # check if the build is from a PR or not
              if (self.SYSTEM_PULLREQUEST_SOURCEBRANCH):
                logging.debug (f"this is a PR as SYSTEM_PULLREQUEST_SOURCEBRANCH is {self.SYSTEM_PULLREQUEST_SOURCEBRANCH}")
                temp = self.SYSTEM_PULLREQUEST_SOURCEBRANCH
                self.BUILD_SOURCEBRANCHNAME = temp[temp.rindex('/')+1:]
                logging.debug (f"BUILD_SOURCEBRANCHNAME is {self.BUILD_SOURCEBRANCHNAME}")
                self.BUILD_SOURCEBRANCH = os.getenv('SYSTEM_PULLREQUEST_SOURCEBRANCH')
                logging.debug (f"BUILD_SOURCEBRANCH is {self.BUILD_SOURCEBRANCH}")
              else:
                self.BUILD_SOURCEBRANCH = os.getenv('BUILD_SOURCEBRANCH')
                self.BUILD_SOURCEBRANCHNAME = os.getenv('BUILD_SOURCEBRANCHNAME')
                
              # create the URL for the PR
              self.url_pr_id= f"{self.SYSTEM_COLLECTIONURI}{self.SYSTEM_TEAMPROJECTID}/_apis/git/repositories/" \
                        f"{self.BUILD_REPOSITORY_ID}/pullRequests"
              
              self.url = f"{self.SYSTEM_COLLECTIONURI}{self.SYSTEM_TEAMPROJECTID}/_apis/git/repositories/" \
                        f"{self.BUILD_REPOSITORY_ID}"
              
              self.url_link_to_repo = f"{self.SYSTEM_COLLECTIONURI}/{self.SYSTEM_TEAMPROJECT}/_git/{self.BUILD_REPOSITORY_NAME}"

              self.headers = {
                  "Content-Type": "application/json"
              }
              self.headers_work_items = {
                  "Content-Type": "application/json-patch+json"
              }
          
          
          def find_pr_id(self): 
              # find the Pull Request ID
              self.PULLREQUESTID = $(System.PullRequest.PullRequestId)
              logging.debug (f"Pull Request ID is {self.PULLREQUESTID}")

              
          def create_comment_url(self):
              self.url = f"{self.url}/pullRequests/{self.PULLREQUESTID}" \
                        "/threads"
              logging.debug (f"PR Comment URL is {self.url} ")

          def add(self, comment: str) -> bool:
              ''' Add a message to Azure DevOps Pull Request'''
              logging.debug (f"Added comment for comment : {comment}")
              data = '{ "comments": [ { "parentCommentId": 0,"content":'+ "\"" + comment + "\"" + ', "commentType": 1}],"status": 1}'
              params = {
                  'api-version': '7.0',
              }
              pat=os.getenv('SYSTEM_ACCESSTOKEN')
              r = requests.post(url=self.url,
                                headers=self.headers, 
                                params=params,
                                data=data, 
                                auth=('', pat),
                              )

              if r.status_code == 200:
                  logging.debug (f"Added comment for comment : {comment}")
                  return True
                  
              else:
                  logging.error (f"Error in adding comment, status_code : {r.status_code}")
                  return False

      msg = Message()
      msg.find_pr_id()
      msg.create_comment_url()

      # Opening findings.json
      try:
          f = open('/home/vsts/work/1/a/findings.json')
          findings = json.load(f)
      except FileNotFoundError:
          logging.error("File findings.json not found at /home/vsts/work/1/a/findings.json")
      except Exception as e:
          logging.error(f"Unknown error: {e}")
      finally:
          f.close()
        
      logging.debug (f"findings['results'] is {findings['results']}")

      # Iterating through the findings in findings.json file
      for i in findings['results']:
          logging.debug (f"finding is {i}")

          # check if the rule is not ignored and rule is from the rule-board-pr-comments
          if ((i['extra']['is_ignored'] == False) & (i['extra']['metadata']['semgrep.policy']['slug'] != "rule-board-audit")):
              
              logging.debug (f"semgrep_org is {semgrep_org}")

              msg_project_name = msg.PROJECT_NAME
              logging.debug (f"msg_project_name is {msg_project_name}")

              msg_src_branch = msg.BUILD_SOURCEBRANCH
              logging.debug (f"msg_src_branch is {msg_src_branch}")

              msg_src_branchname = msg.BUILD_SOURCEBRANCHNAME
              logging.debug (f"msg_src_branchname is {msg_src_branchname}")

              msg_finding_id = i['check_id']
              logging.debug (f"msg_finding_id is {msg_finding_id}")

              msg_commit_id = msg.BUILD_SOURCEVERSION
              logging.debug (f"msg_commit_id is {msg_commit_id}")

              msg_summary = i['extra']['message']
              logging.debug (f"msg_summary is {msg_summary}")

              msg_fingerprint = i['extra']['fingerprint']
              logging.debug (f"msg_fingerprint is {msg_fingerprint}")

              msg_file_path = i['path']
              logging.debug (f"msg_file_path is {msg_file_path}")

              msg_file_start_line =  i['start']['line']
              logging.debug (f"msg_file_start_line is {msg_file_start_line}") 

              msg_file_end_line = i['end']['line']
              logging.debug (f"msg_file_end_line is {msg_file_end_line}") 

              msg_file_start_col =  i['start']['col']
              logging.debug (f"msg_file_start_col is {msg_file_start_col}")

              msg_file_end_col = i['end']['col']
              logging.debug (f"msg_file_end_col is {msg_file_end_col}")   

              msg_shortlink = i['extra']['metadata']['shortlink']
              logging.debug (f"msg_shortlink is {msg_shortlink}") 

              msg_vuln_code = i['extra']['lines']
              logging.debug (f"msg_vuln_code is {msg_vuln_code}") 

              msg_semgrep_fingerprint = i['extra']['fingerprint']
              logging.debug (f"msg_semgrep_fingerprint is {msg_semgrep_fingerprint}") 

              msg_vuln_code_text = f"/{msg_file_path}:{msg_file_start_line}"
              logging.debug (f"msg_vuln_code_text is {msg_vuln_code_text}")   

              msg_vuln_code_url = f"{msg.url_link_to_repo}" \
                                  f"?path=/{msg_file_path}&" \
                                  f"version=GB{msg_src_branchname}&" \
                                  f"line={msg_file_start_line}&" \
                                  f"lineEnd={msg_file_end_line}&" \
                                  f"lineStartColumn={msg_file_start_col}&" \
                                  f"lineEndColumn={msg_file_end_col}&" \
                                  f"lineStyle=plain&_a=contents"
              logging.debug (f"msg_vuln_code_url is {msg_vuln_code_url}")

              url_to_findings = f"https://semgrep.dev/orgs/{semgrep_org}/findings?repo={msg_project_name}&ref={msg_src_branch}"

              comment = f"**Link to code**- [{msg_vuln_code_text}]({msg_vuln_code_url}) \n\n" \
                        f"**Link to commit**- [{msg_commit_id}]({msg.url_link_to_repo }/commit/{msg_commit_id}?ref={msg_src_branch})  \n\n" \
                        f"**Summary**- {msg_summary} \n\n" \
                        f"**More details on rule** - {msg_shortlink} \n\n" \
                        f"**Link to project findings in** [Semgrep]({url_to_findings}) \n\n"
              result = msg.add(comment=comment)
              if result is False:
                  logging.error(f"Sending message failed with comment: {result}")
        
      # Closing file
      f.close()                    
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    LOG_LEVEL: DEBUG
    SEMGREP_ORG: r2c-cse
  condition: ne(variables['Build.SourceBranchName'], 'master')
    
  displayName: 'Python script to add pull request comment'

##################################################################################################################
######## WORK ITEM CREATION ######################################################################################
##################################################################################################################
- task: PythonScript@0
  inputs:
    scriptSource: 'inline'
    script: |
      import requests
      import os
      import pprint
      import json
      import logging
      import base64
      import urllib.parse
      from datetime import datetime

      # qq: import logging level from environment variable, default to INFO
      loglevel = os.getenv('LOG_LEVEL', 'INFO')
      semgrep_org = os.getenv('SEMGREP_ORG', 'xxxxx')
      logging.basicConfig(level=loglevel)
      logging.debug (loglevel)


      class WorkItem():
          '''Creating an Instance of Work Item'''

          def __init__(self):
              # Get the environment variables from the pipeline
              self.PROJECT_NAME = os.getenv('BUILD_REPOSITORY_NAME')
              self.SYSTEM_COLLECTIONURI = os.getenv('SYSTEM_COLLECTIONURI')
              self.SYSTEM_TEAMPROJECT = os.getenv('SYSTEM_TEAMPROJECT')
              self.SYSTEM_TEAMPROJECTID = os.getenv('SYSTEM_TEAMPROJECTID')
              self.BUILD_REPOSITORY_ID = os.getenv('BUILD_REPOSITORY_ID')
              self.BUILD_REPOSITORY_NAME = os.getenv('BUILD_REPOSITORY_NAME')
              self.BUILD_REQUESTEDFOREMAIL=os.getenv('BUILD_REQUESTEDFOREMAIL') 
              self.PIPELINESTARTTIME = os.getenv('SYSTEM_PIPELINESTARTTIME')
              self.PULLREQUESTID = 0
              temp = os.getenv('SYSTEM_PULLREQUEST_SOURCEBRANCH')
              self.BUILD_SOURCEBRANCHNAME = temp[temp.rindex('/')+1:]
              
              # create the URL for Work Items
              self.url_to_work_items = f"{self.SYSTEM_COLLECTIONURI}{self.SYSTEM_TEAMPROJECTID}/_apis/wit/workitems/%24task"
              self.url_link_to_repo = f"{self.SYSTEM_COLLECTIONURI}/{self.SYSTEM_TEAMPROJECT}/_git/{self.BUILD_REPOSITORY_NAME}"
              self.headers_work_items = {
                  "Content-Type": "application/json-patch+json"
              }

          def find_pr_id(self): 
              # find the Pull Request ID
              self.PULLREQUESTID = $(System.PullRequest.PullRequestId)
              logging.debug (f"Pull Request ID is {self.PULLREQUESTID}")

          def get_deployment(self) -> str:
              token_api = os.getenv('SEMGREP_APP_TOKEN')  
              headers = {"Accept": "application/json", "Authorization": "Bearer " + token_api}

              r = requests.get('https://semgrep.dev/api/v1/deployments',headers=headers)
              if r.status_code != 200:
                  logging.error(f"Sending message failed with comment: {r.text}")
              data = json.loads(r.text)
              slug_name = data['deployments'][0].get('slug')
              logging.debug(f"Accessing org: {slug_name}")
              return slug_name
          
          def get_findings_per_repo(self, slug_name: str, repo: str, file_path: str):      
              logging.debug (f"Getting findings!")
              token_api = os.getenv('SEMGREP_APP_TOKEN')  
              headers = {"Accept": "application/json", "Authorization": "Bearer " + token_api}
              r = requests.get('https://semgrep.dev/api/v1/deployments/' + slug_name + '/findings?dedup=true&repos='+repo,headers=headers)
              if r.status_code != 200:
                logging.error(f"Sending message failed with comment: {r.text}")
              data = json.loads(r.text)
              logging.debug (f"Dumping findings to: {file_path}")
              with open(file_path, "w") as file:
                json.dump(data, file)


          def add_work_items(self, title: str, summary: str, file_info: str, vuln_code_url: str, severity:str, url_to_semgrep: str, tags: str) -> bool:
              ''' Add work items to Azure DevOps Pull Request'''
              logging.debug (f"Added workitem")
              area = "WebGoat\\\Review"
              link_to_pr = '{ "op": "add", "path": "/relations/-", "value": { "rel": "ArtifactLink", "url": "vstfs:///Git/PullRequestId/'+ str(self.SYSTEM_TEAMPROJECTID) +'/'+ str(self.BUILD_REPOSITORY_ID) +'/'+ str(self.PULLREQUESTID) +'", "attributes": { "name": "pull request" } } }'
              html_description = "<!DOCTYPE html> <html> <body> <p> <strong>Summary: </strong>" + summary + "</p> <p></p> <p><strong>Link to code: </strong><a href=" + vuln_code_url + ">" + file_info + "</a></p><p></p><p><strong>Link to project findings in Semgrep: </strong><a href=" + url_to_semgrep + ">" + url_to_semgrep + "</a></p><p></p> <p><strong>Severity: </strong>" + severity + "</p></body></html> "
              data = '[ { "op": "add", "path": "/fields/System.Title", "from": null, "value": "' + title + '" }, { "op": "add", "path": "/fields/System.AssignedTo", "value": "'+ self.BUILD_REQUESTEDFOREMAIL + '" },' + link_to_pr + ', { "op": "add", "path": "/fields/System.Tags", "value":  "'+ tags + '" },{ "op": "add", "path": "/fields/System.AreaPath", "value":  "'+ area + '" }, { "op": "add", "path": "/fields/System.Description", "value": "' + html_description + '" }]'
              logging.debug(f"{data}")
              params = {
                  'api-version': '7.0',
              }
              pat=os.getenv('SYSTEM_ACCESSTOKEN')
              r = requests.post(url=self.url_to_work_items,
                                headers=self.headers_work_items, 
                                params=params,
                                data=data, 
                                auth=('', pat),
                              )

              if r.status_code == 200:
                  logging.debug (f"Added workitem successfully")
                  return True
                  
              else:
                  logging.error (f"Error in adding workitem, status_code : {r.status_code}")
                  logging.error (f"Error in adding workitem, headers : {r.headers}")
                  logging.error (f"Error in adding workitem, text : {r.text}")
                  return False

      workitem = WorkItem()
      workitem.find_pr_id()
      # Getting findings
      try:
          path = '/home/vsts/work/1/a/findings_api.json'
          project_name = workitem.PROJECT_NAME
          org_name = workitem.get_deployment()
          branch_name = workitem.BUILD_SOURCEBRANCHNAME
          workitem.get_findings_per_repo(org_name, project_name, path)
          f = open(path)
          findings = json.load(f)
      except FileNotFoundError:
          logging.error("File findings.json not found at /home/vsts/work/1/a/findings_api.json")
      except Exception as e:
          logging.error(f"Unknown error: {e}")
      finally:
          f.close()
    

      # Iterating through the findings in findings.json file
      for i in findings['findings']:
          logging.debug (f"finding is {i}")

          work_item_finding_id = i['id']
          logging.debug (f"work_item_finding_id is {work_item_finding_id}")

          work_item_summary = i['rule_name']
          logging.debug (f"work_item_summary is {work_item_summary}")

          work_item_message = i['rule_message']
          logging.debug (f"work_item_message is {work_item_message}") 

          work_item_severity = i['severity']
          logging.debug (f"work_item_severity is {work_item_severity}") 
          
          work_item_relevant_since = i['relevant_since']
          logging.debug (f"work_item_relevant_since is {work_item_relevant_since}") 

          work_item_policy = i['sourcing_policy']['slug']
          logging.debug (f"work_item_policy is {work_item_policy}") 

          work_item_file_info = i['location']['file_path'] + ":" + str(i['location']['line'])
          logging.debug (f"work_item_file_info is {work_item_file_info}") 

          work_item_vuln_code_url = f"{workitem.url_link_to_repo }" \
                              f"?path=/{i['location']['file_path']}&" \
                              f"version=GB{workitem.BUILD_SOURCEBRANCHNAME}&" \
                              f"line={i['location']['line']}&" \
                              f"lineEnd={i['location']['end_line']}&" \
                              f"lineStartColumn={i['location']['column']}&" \
                              f"lineEndColumn={i['location']['end_column']}&" \
                              f"lineStyle=plain&_a=contents"

          ## format: 2023-09-18 07:49:42+00:00
          time_pipeline = workitem.PIPELINESTARTTIME[0:19]
          time_pipeline = datetime.strptime(time_pipeline, '%Y-%m-%d %H:%M:%S')
          logging.debug(time_pipeline)
          
          ## 2023-09-15T15:34:38.059101Z
          work_item_relevant_since = work_item_relevant_since[0:19]
          time_relevante_since = datetime.strptime(work_item_relevant_since, '%Y-%m-%dT%H:%M:%S')
          logging.debug(time_relevante_since)

          url_to_semgrep = f"https://semgrep.dev/orgs/{org_name}/findings?repo={project_name}&ref={branch_name}"

          if (time_relevante_since > time_pipeline and work_item_policy != 'rule-board-audit'):
              logging.debug(f"New finding: {work_item_finding_id}")
              workitem.add_work_items(work_item_summary, work_item_message, work_item_file_info, work_item_vuln_code_url, work_item_severity, url_to_semgrep, "semgrep")
        
      # Closing file
      f.close()                    
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    LOG_LEVEL: DEBUG
  condition: ne(variables['Build.SourceBranchName'], 'master')
    
  displayName: 'Python script to add work items'